defmodule Bonny.Operator do
  @moduledoc ~S"""
  Defines a Bonny operator.

  The operator deifnes custom resources and (their) controllers
  and serves as the entry point to the watching and handling
  processes.

  Overall, an operator has the following responsibilities:

    * To define any custom resources ending up in the manifest
      generated by `mix bonny.gen.manifest`

    * to provide a wrapper for starting and stopping the
      operator as part of a supervision tree

    * To define the resources to be watched together with the
      controllers which handle action events on those resources.

    * to define an initial pluggable pipeline for all action events
      to pass through

  ## Operators

  An operator is defined with the help of `Bonyy.Operator`. The step `:handle_event`
  has do be part of the pipeline. It is the step that calls the handling controller
  for a given action event:

      defmodule YourOperatorApp.Operator do
        use Bonny.Operator, default_watching_namespace: "default"

        # step ...
        step :handle_event
        # step ...

        def controllers(watching_namespace, _opts) do
          [
            %{
              query: K8s.Client.list("your-controller.io", "YourCustomResource", namespace: nil)
            }
          ]
        end


      end


  """

  alias Bonny.Axn

  @type controller_spec :: %{
          controller: atom(),
          query: K8s.Operation.t()
        }

  @callback controllers(binary(), Keyword.t()) :: controller_spec()
  @callback crds() :: list(Bonny.API.CRD.t())

  defmacro __using__(opts) do
    quote do
      use Pluggable.StepBuilder

      @behaviour Bonny.Operator

      unquote(server(opts))
    end
  end

  defp server(opts) do
    quote location: :keep do
      @default_watch_namespace unquote(opts)[:default_watch_namespace] ||
                                 raise("operator expects :default_watch_namespace to be given")

      @doc """
      Returns the child specification to start the operator
      under a supervision tree.
      """
      def child_spec(opts) do
        %{
          id: __MODULE__,
          start: {__MODULE__, :start_link, [opts]},
          type: :supervisor
        }
      end

      @doc """
      Starts the operator supervision tree.

      ## Init Arguments

        * `:conn` - Required - The `%K8s.Conn{}` struct defining the connection to Kubernetes.
        * `:watch_namespace` - The namespache to be watched. Defaults to "default"

      All other options are passed to `controllers/2` and merged into the
      operator configuration.
      """
      def start_link(init_args \\ []) do
        {watch_namespace, init_args} =
          Keyword.pop(init_args, :watch_namespace, @default_watch_namespace)

        controllers = controllers(watch_namespace, init_args) |> Enum.map(&Map.to_list(&1))
        Bonny.Operator.Supervisor.start_link(controllers, __MODULE__, init_args)
      end

      @doc """
      Runs the controller pipeline for the current action event.
      """
      def handle_event(axn, _opts) do
        result = axn.handler.call(axn, [])

        # TODO: Create steps for these:
        Bonny.Axn.apply_status(result)
        Bonny.Axn.emit_events(result)

        result
      end
    end
  end

  def run({action, resource}, controller, operator, conn) do
    Axn.new!(
      conn: conn,
      action: action,
      resource: resource,
      handler: controller,
      operator: operator
    )
    |> operator.call([])
  end
end
